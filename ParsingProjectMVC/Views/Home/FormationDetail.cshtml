@{
    ViewData["Title"] = "Formasyon Görselleştirmesi";
}
<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        #plot {
            width: 100%;
            height: 500px;
            border: 1px solid #ccc;
        }

        #dropzone {
            width: 100%;
            height: 100px;
            border: 2px dashed #ccc;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #ccc;
            margin-bottom: 20px;
            position: relative;
        }

        #filename {
            position: absolute;
            bottom: 10px;
            left: 10px;
            color: #666;
            font-size: 14px;
        }

        .axis text {
            font-size: 10px;
        }
    </style>
    <script src="https://d3js.org/d3.v6.min.js"></script>
</head>

<body>
    <h3>Formasyon Görselleştirmesi</h3>
    <div id="dropzone">
        CSV dosyasını buraya sürükleyin
        <div id="filename"></div>
    </div>
    <div id="plot"></div>
    <script>const dropzone = document.getElementById('dropzone');
        const filenameDisplay = document.getElementById('filename');

        dropzone.addEventListener('dragover', function (event) {
            event.preventDefault();
            dropzone.style.borderColor = "#666";
            dropzone.style.color = "#666";
        });

        dropzone.addEventListener('dragleave', function (event) {
            dropzone.style.borderColor = "#ccc";
            dropzone.style.color = "#ccc";
        });

        dropzone.addEventListener('drop', function (event) {
            event.preventDefault();
            dropzone.style.borderColor = "#ccc";
            dropzone.style.color = "#ccc";

            const file = event.dataTransfer.files[0];
            if (file) {
                filenameDisplay.textContent = file.name;

                const reader = new FileReader();
                reader.onload = function (e) {
                    const text = e.target.result;
                    const rawData = d3.dsvFormat(";").parse(text);
                    drawChart(rawData);
                };
                reader.readAsText(file);
            }
        });

        function drawChart(rawData) {
            d3.select("#plot").select("svg").remove();  // Önceki grafiği temizle

            // CSV'den alınan verileri data dizisine dönüştürme
            const data = rawData.map((d, i) => {
                if (i === 0) {
                    return {
                        state: "Kuyu", // Sabit değer
                        formasyon: d.Formasyon, // CSV'deki formasyon kolonu
                        depth: +d["Alt Derinlik (TVD)"]  // CSV'deki ilk derinlik kolonu
                    };
                } else {
                    const previousDepth = +rawData[i - 1]["Alt Derinlik (TVD)"];
                    const currentDepth = +d["Alt Derinlik (TVD)"];
                    return {
                        state: "Kuyu", // Sabit değer
                        formasyon: d.Formasyon, // CSV'deki formasyon kolonu
                        depth: currentDepth - previousDepth  // Bir önceki derinlikten çıkarılarak hesaplanır
                    };
                }
            });

            const width = 300;
            const height = 500;
            const marginTop = 10;
            const marginRight = 10;
            const marginBottom = 20;
            const marginLeft = 40;

            const series = d3.stack()
                .keys(d3.union(data.map(d => d.formasyon)))
                .value(([, D], key) => D.get(key).depth)
                (d3.index(data, d => d.state, d => d.formasyon));

            const x = d3.scaleBand()
                .domain(d3.groupSort(data, D => -d3.sum(D, d => d.depth), d => d.state))
                .range([marginLeft, width - marginRight])
                .padding(0.1);

            const y = d3.scaleLinear()
                .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
                .range([marginTop, height - marginBottom]);

            const color = d3.scaleOrdinal()
                .domain(series.map(d => d.key))
                .range(d3.schemeSpectral[series.length])
                .unknown("#ccc");

            const svg = d3.select("#plot").append("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("viewBox", [0, 0, width, height])
                .attr("style", "max-width: 100%; height: auto;");

            svg.append("g")
                .selectAll("g")
                .data(series)
                .join("g")
                .attr("fill", d => color(d.key))
                .selectAll("rect")
                .data(D => D.map(d => (d.key = D.key, d)))
                .join("rect")
                .attr("x", d => x(d.data[0]))
                .attr("y", d => y(d[0]))
                .attr("height", d => y(d[1]) - y(d[0]))
                .attr("width", x.bandwidth())
                .append("title")
                .text(d => `${d.data[0]} ${d.key}\n${d.data[1].get(d.key).depth.toLocaleString("en")}`);

            svg.append("g")
                .attr("transform", `translate(0,${height - marginBottom})`)
                .call(d3.axisBottom(x).tickSizeOuter(0))
                .call(g => g.selectAll(".domain").remove());

            svg.append("g")
                .attr("transform", `translate(${marginLeft},0)`)
                .call(d3.axisLeft(y).ticks(null, "s"))
                .call(g => g.selectAll(".domain").remove());
        }</script>
</body>
</html>
