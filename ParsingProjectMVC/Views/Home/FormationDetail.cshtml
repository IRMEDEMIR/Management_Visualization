@{
    ViewData["Title"] = "Formasyon Görselleştirmesi";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        #plot-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        #plot, #plot2 {
            width: 48%;
            height: 500px;
            border: 1px solid #ccc;
        }

        #dropzone, #dropzone2 {
            width: 48%;
            height: 100px;
            border: 2px dashed #007bff;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #007bff;
            text-align: center;
            margin-bottom: 20px;
        }

        .axis text {
            font-size: 10px;
        }
    </style>
    <script src="https://d3js.org/d3.v6.min.js"></script>
</head>
<body>
    <h3>Formasyon Görselleştirmesi</h3>

    <div id="plot-container">
        <div id="dropzone">
            Yer altı formasyonu için sürükleyip bırakın veya dosya seçin
            <input type="file" id="fileInput" style="display: none;">
            <div id="filename"></div>
        </div>
        <div id="dropzone2">
            Kuyu formasyonu için sürükleyip bırakın veya dosya seçin
            <input type="file" id="fileInput2" style="display: none;">
            <div id="filename2"></div>
        </div>
    </div>

    <div id="plot-container">
        <div id="plot"></div>
        <div id="plot2"></div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.getElementById('fileInput');
            const filenameDisplay = document.getElementById('filename');

            const dropzone2 = document.getElementById('dropzone2');
            const fileInput2 = document.getElementById('fileInput2');
            const filenameDisplay2 = document.getElementById('filename2');

            dropzone.addEventListener('click', function () {
                fileInput.click();
            });

            dropzone.addEventListener('dragover', function (event) {
                event.preventDefault();
                dropzone.style.borderColor = "#666";
                dropzone.style.color = "#666";
            });

            dropzone.addEventListener('dragleave', function () {
                dropzone.style.borderColor = "#ccc";
                dropzone.style.color = "#ccc";
            });

            dropzone.addEventListener('drop', function (event) {
                event.preventDefault();
                dropzone.style.borderColor = "#ccc";
                dropzone.style.color = "#ccc";

                const file = event.dataTransfer.files[0];
                handleFile(file);
            });

            fileInput.addEventListener('change', function (event) {
                const file = event.target.files[0];
                handleFile(file);
            });

            dropzone2.addEventListener('click', function () {
                fileInput2.click();
            });

            dropzone2.addEventListener('dragover', function (event) {
                event.preventDefault();
                dropzone2.style.borderColor = "#666";
                dropzone2.style.color = "#666";
            });

            dropzone2.addEventListener('dragleave', function () {
                dropzone2.style.borderColor = "#ccc";
                dropzone2.style.color = "#ccc";
            });

            dropzone2.addEventListener('drop', function (event) {
                event.preventDefault();
                dropzone2.style.borderColor = "#ccc";
                dropzone2.style.color = "#ccc";

                const file = event.dataTransfer.files[0];
                handleFile2(file);
            });

            fileInput2.addEventListener('change', function (event) {
                const file = event.target.files[0];
                handleFile2(file);
            });

            function handleFile(file) {
                if (file) {
                    filenameDisplay.textContent = file.name;

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const text = e.target.result;
                        const rawData = d3.dsvFormat(";").parse(text);
                        drawChart(rawData);
                    };
                    reader.readAsText(file);
                }
            }

            function handleFile2(file) {
                if (file) {
                    filenameDisplay2.textContent = file.name;

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const text = e.target.result;
                        const rawData = parseWellpathReport(text);
                        drawChart2(rawData);
                    };
                    reader.readAsText(file);
                }
            }

            function parseWellpathReport(text) {
                const lines = text.split('\n');

                // 'Wellpath Report' ve 'Comments' başlıklarının indekslerini bul
                const startIndex = lines.findIndex(line => line.includes('Wellpath Report')) + 1;
                const endIndex = lines.findIndex(line => line.includes('Comments'));

                if (startIndex === 0 || endIndex === -1) {
                    console.error("Wellpath Report veya Comments başlığı bulunamadı.");
                    return [];
                }

                // 'Wellpath Report' ve 'Comments' arası satırları al
                const reportLines = lines.slice(startIndex, endIndex).filter(line => line.trim() !== '');
                if (reportLines.length === 0) {
                    console.error("Wellpath Report kısmında veri bulunamadı.");
                    return [];
                } else {
                    console.log("Wellpath Report kısmında veri bulundu.");
                }

                // Başlıkları al
                const header = reportLines[0].split(';');
                console.log("Başlıklar:", header);

                // Veriyi parse et
                return reportLines.slice(1).map((line) => {
                    const values = line.split(';').map(value => value.trim().replace(',', '.'));

                    const [MD, Inc, Azi, TVD] = values;

                    return {
                        MD: parseFloat(MD),
                        Inc: parseFloat(Inc),
                        Azi: parseFloat(Azi),
                        TVD: parseFloat(TVD)
                    };
                }).filter(d => d !== null);
            }

            function drawChart(rawData) {
                d3.select("#plot").select("svg").remove();  // Önceki grafiği temizle

                const data = rawData.map((d, i) => {
                    if (i === 0) {
                        return {
                            state: "Kuyu",
                            formasyon: d.Formasyon,
                            depth: +d["Alt Derinlik (TVD)"]
                        };
                    } else {
                        const previousDepth = +rawData[i - 1]["Alt Derinlik (TVD)"];
                        const currentDepth = +d["Alt Derinlik (TVD)"];
                        return {
                            state: "Kuyu",
                            formasyon: d.Formasyon,
                            depth: currentDepth - previousDepth
                        };
                    }
                });

                const width = 300;
                const height = 500;
                const marginTop = 10;
                const marginRight = 10;
                const marginBottom = 20;
                const marginLeft = 40;

                const series = d3.stack()
                    .keys(d3.union(data.map(d => d.formasyon)))
                    .value(([, D], key) => D.get(key).depth)
                    (d3.index(data, d => d.state, d => d.formasyon));

                const x = d3.scaleBand()
                    .domain(d3.groupSort(data, D => -d3.sum(D, d => d.depth), d => d.state))
                    .range([marginLeft, width - marginRight])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
                    .range([height - marginBottom, marginTop]);

                const color = d3.scaleOrdinal()
                    .domain(series.map(d => d.key))
                    .range(d3.schemeSpectral[series.length])
                    .unknown("#ccc");

                const svg = d3.select("#plot").append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .attr("viewBox", [0, 0, width, height])
                    .attr("style", "max-width: 100%; height: auto;");

                svg.append("g")
                    .selectAll("g")
                    .data(series)
                    .join("g")
                    .attr("fill", d => color(d.key))
                    .selectAll("rect")
                    .data(d => d)
                    .join("rect")
                    .attr("x", (d, i) => x(d.data[0]))
                    .attr("y", d => y(d[1]))
                    .attr("height", d => y(d[0]) - y(d[1]))
                    .attr("width", x.bandwidth());

                svg.append("g")
                    .attr("transform", `translate(0,${height - marginBottom})`)
                    .call(d3.axisBottom(x).tickSizeOuter(0))
                    .call(g => g.selectAll(".domain").remove())
                    .append("text")
                    .attr("x", width / 2)
                    .attr("y", marginBottom * 1.5)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "middle")
                    .text("Kuyu Formasyonu");

                svg.append("g")
                    .attr("transform", `translate(${marginLeft},0)`)
                    .call(d3.axisLeft(y))
                    .call(g => g.select(".domain").remove())
                    .append("text")
                    .attr("x", -marginLeft)
                    .attr("y", 10)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "start")
                    .text("Derinlik (TVD)");

                const legend = svg => {
                    const g = svg
                        .attr("transform", `translate(${width},0)`)
                        .attr("text-anchor", "end")
                        .attr("font-family", "sans-serif")
                        .attr("font-size", 10)
                        .selectAll("g")
                        .data(color.domain().slice().reverse())
                        .join("g")
                        .attr("transform", (d, i) => `translate(0,${(i + 0.5) * 20})`);

                    g.append("rect")
                        .attr("x", -19)
                        .attr("width", 19)
                        .attr("height", 19)
                        .attr("fill", color);

                    g.append("text")
                        .attr("x", -24)
                        .attr("y", 9.5)
                        .attr("dy", "0.35em")
                        .text(d => d);
                };

                svg.append("g").call(legend);
            }

            function drawChart2(rawData) {
                d3.select("#plot2").select("svg").remove();  // Önceki grafiği temizle

                const data = rawData.map(d => d.MD);

                const width = 300;
                const height = 500;
                const marginTop = 10;
                const marginRight = 10;
                const marginBottom = 20;
                const marginLeft = 40;

                const x = d3.scaleBand()
                    .domain(["MD"])
                    .range([marginLeft, width - marginRight])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(data)])
                    .range([height - marginBottom, marginTop]);

                const svg = d3.select("#plot2").append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .attr("viewBox", [0, 0, width, height])
                    .attr("style", "max-width: 100%; height: auto;");

                svg.append("g")
                    .selectAll("rect")
                    .data(data)
                    .join("rect")
                    .attr("x", x("MD"))
                    .attr("y", d => y(d))
                    .attr("height", d => y(0) - y(d))
                    .attr("width", x.bandwidth())
                    .attr("fill", "#007bff");

                svg.append("g")
                    .attr("transform", `translate(0,${height - marginBottom})`)
                    .call(d3.axisBottom(x).tickSizeOuter(0))
                    .call(g => g.selectAll(".domain").remove())
                    .append("text")
                    .attr("x", width / 2)
                    .attr("y", marginBottom * 1.5)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "middle")
                    .text("MD Değerleri");

                svg.append("g")
                    .attr("transform", `translate(${marginLeft},0)`)
                    .call(d3.axisLeft(y))
                    .call(g => g.select(".domain").remove())
                    .append("text")
                    .attr("x", -marginLeft)
                    .attr("y", 10)
                    .attr("fill", "currentColor")
                    .attr("text-anchor", "start")
                    .text("MD (Measured Depth)");
            }

        });
    </script>
</body>
</html>
