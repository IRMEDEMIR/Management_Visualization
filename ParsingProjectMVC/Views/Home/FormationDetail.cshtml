@{
    ViewData["Title"] = "Formasyon Görselleştirmesi";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }

        #plot-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        #plot, #plot2 {
            width: 48%;
            height: 600px;
            border: 1px solid #ccc;
        }

        #dropzone, #dropzone2 {
            width: 48%;
            height: 100px;
            border: 2px dashed #007bff;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            color: #007bff;
            text-align: center;
            margin-bottom: 20px;
        }

        .axis text {
            font-size: 10px;
        }

        .plot-with-title {
            position: relative;
            margin-bottom: 20px; /* Başlık ile plot arasına boşluk bırakır */
        }

        .plot-title {
            position: absolute;
            top: -30px; /* Başlığı div'in üstünde konumlandırır */
            left: 50%;
            transform: translateX(-50%);
            font-size: 16px;
            font-weight: bold;
            text-align: center;
        }


    </style>
    <script src="https://d3js.org/d3.v6.min.js"></script>
</head>
<body>


    <div id="plot-container">
        <div id="dropzone">
            Yer altı formasyonu için sürükleyip bırakın veya dosya seçin:
            <input type="file" id="fileInput" style="display: none;">
            <div id="filename"></div>
        </div>
        <div id="dropzone2">
            Kuyu formasyonu için sürükleyip bırakın veya dosya seçin:
            <input type="file" id="fileInput2" style="display: none;">
            <div id="filename2"></div>
        </div>
    </div>

    <div id="plot-container">
        <div id="plot" class="plot-with-title">
            <div class="plot-title">Yer Altı Formasyonu</div>
        </div>
        <div id="plot2" class="plot-with-title">
            <div class="plot-title">Kuyu Formasyonu</div>
        </div>
    </div>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const dropzone = document.getElementById('dropzone');
            const fileInput = document.getElementById('fileInput');
            const filenameDisplay = document.getElementById('filename');

            const dropzone2 = document.getElementById('dropzone2');
            const fileInput2 = document.getElementById('fileInput2');
            const filenameDisplay2 = document.getElementById('filename2');

            let originalFormations = [];  // originalFormations değişkenini global olarak tanımlıyoruz

            dropzone.addEventListener('click', function () {
                fileInput.click();
            });

            dropzone.addEventListener('dragover', function (event) {
                event.preventDefault();
                dropzone.style.borderColor = "#666";
                dropzone.style.color = "#666";
            });

            dropzone.addEventListener('dragleave', function () {
                dropzone.style.borderColor = "#ccc";
                dropzone.style.color = "#ccc";
            });

            dropzone.addEventListener('drop', function (event) {
                event.preventDefault();
                dropzone.style.borderColor = "#ccc";
                dropzone.style.color = "#ccc";

                const file = event.dataTransfer.files[0];
                handleFile(file);
            });

            fileInput.addEventListener('change', function (event) {
                const file = event.target.files[0];
                handleFile(file);
            });

            dropzone2.addEventListener('click', function () {
                fileInput2.click();
            });

            dropzone2.addEventListener('dragover', function (event) {
                event.preventDefault();
                dropzone2.style.borderColor = "#666";
                dropzone2.style.color = "#666";
            });

            dropzone2.addEventListener('dragleave', function () {
                dropzone2.style.borderColor = "#ccc";
                dropzone2.style.color = "#ccc";
            });

            dropzone2.addEventListener('drop', function (event) {
                event.preventDefault();
                dropzone2.style.borderColor = "#ccc";
                dropzone2.style.color = "#ccc";

                const file = event.dataTransfer.files[0];
                handleFile2(file);
            });

            fileInput2.addEventListener('change', function (event) {
                const file = event.target.files[0];
                handleFile2(file);
            });

            function handleFile(file) {
                if (file) {
                    filenameDisplay.textContent = file.name;

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const text = e.target.result;
                        const rawData = d3.dsvFormat(";").parse(text);
                        originalFormations = rawData;  // Verileri kaydediyoruz
                        drawChart(originalFormations);
                    };
                    reader.readAsText(file);
                }
            }

            function handleFile2(file) {
                if (file) {
                    filenameDisplay2.textContent = file.name;

                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const text = e.target.result;
                        const wellboreData = parseWellpathReport(text);
                        drawChart2(wellboreData);
                    };
                    reader.readAsText(file);
                }
            }
            function parseWellpathReport(text) {
                const lines = text.split('\n');

                // 'Wellpath Report' ve 'Comments' başlıklarının indekslerini bul
                const startIndex = lines.findIndex(line => line.includes('Wellpath Report')) + 1;
                const endIndex = lines.findIndex(line => line.includes('Comments'));

                if (startIndex === 0 || endIndex === -1) {
                    console.error("Wellpath Report veya Comments başlığı bulunamadı.");
                    return [];
                }

                // 'Wellpath Report' ve 'Comments' arası satırları al
                const reportLines = lines.slice(startIndex, endIndex).filter(line => line.trim() !== '');
                if (reportLines.length === 0) {
                    console.error("Wellpath Report kısmında veri bulunamadı.");
                    return [];
                } else {
                    console.log("Wellpath Report kısmında veri bulundu.");
                }

                // Başlıkları al
                const header = reportLines[0].split(';');
                console.log("Başlıklar:", header);

                // Veriyi parse et
                return reportLines.slice(1).map((line) => {
                    const values = line.split(';').map(value => value.trim().replace(',', '.'));

                    const [MD, Inc, Azi, TVD, DL, VS] = values;

                    // NaN olan değerleri filtrele
                    const parsedMD = parseFloat(MD);
                    const parsedInc = parseFloat(Inc);
                    const parsedAzi = parseFloat(Azi);
                    const parsedTVD = parseFloat(TVD);
                    const parsedDL = parseFloat(DL);
                    const parsedVS = parseFloat(VS);

                    if (isNaN(parsedMD) || isNaN(parsedInc) || isNaN(parsedAzi) || isNaN(parsedTVD) || isNaN(parsedVS)) {
                        return null;
                    }


                    return {
                        MD: parsedMD,
                        Inc: parsedInc,
                        Azi: parsedAzi,
                        TVD: parsedTVD,
                        DL: parsedDL,
                        VS: parsedVS,
                    };
                }).filter(d => d !== null);
            }


            function drawChart(rawData) {
                d3.select("#plot").select("svg").remove();

                const data = rawData.map((d, i) => {
                    if (i === 0) {
                        return {
                            state: "Kuyu",
                            formasyon: d.Formasyon,
                            depth: +d["Alt Derinlik (TVD)"]
                        };
                    } else {
                        const previousDepth = +rawData[i - 1]["Alt Derinlik (TVD)"];
                        const currentDepth = +d["Alt Derinlik (TVD)"];
                        return {
                            state: "Kuyu",
                            formasyon: d.Formasyon,
                            depth: currentDepth - previousDepth
                        };
                    }
                });


                const plotWidth = 400; // Grafiğin genişliği
                const tableWidth = 300; // Tablo genişliği
                const width = plotWidth + tableWidth + 100; // Toplam genişlik (boşluk bırakmak için ek genişlik)
                const height = 700;
                const marginTop = 60; // Grafiği ve tabloyu aşağı almak için arttırıldı
                const marginRight = 10;
                const marginBottom = 40;
                const marginLeft = 60; // Tablo için genişletildi


                const series = d3.stack()
                    .keys(d3.union(data.map(d => d.formasyon)))
                    .value(([, D], key) => D.get(key).depth)
                    (d3.index(data, d => d.state, d => d.formasyon));

                const x = d3.scaleBand()
                    .domain(d3.groupSort(data, D => -d3.sum(D, d => d.depth), d => d.state))
                    .range([marginLeft, plotWidth - marginRight])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
                    .range([marginTop, height - marginBottom]); // Y ekseni yukarıdan aşağıya doğru artacak şekilde ayarlandı

                const color = d3.scaleOrdinal()
                    .domain(series.map(d => d.key))
                    .range(d3.schemeSpectral[series.length])
                    .unknown("#ccc");

                const svg = d3.select("#plot").append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .attr("viewBox", [0, 0, width, height])
                    .attr("style", "max-width: 100%; height: auto;")
                    .call(zoom); // Zoom davranışı burada ekleniyor

                // Çubukları ekle
                svg.append("g")
                    .selectAll("g")
                    .data(series)
                    .join("g")
                    .attr("fill", d => color(d.key))
                    .selectAll("rect")
                    .data(D => D.map(d => (d.key = D.key, d)))
                    .join("rect")
                    .attr("x", d => x(d.data[0]))
                    .attr("y", d => y(d[0])) // Zoom işlemi için güncellendi
                    .attr("height", d => y(d[1]) - y(d[0])) // Zoom işlemi için güncellendi
                    .attr("width", x.bandwidth())
                    .append("title")
                    .text(d => `${d.data[0]} ${d.key}\n${d.data[1].get(d.key).depth.toLocaleString("tr")}`);

                // Y eksenini ekle ve aralıkları 100'er 100'er ayarla
                const yAxis = svg.append("g")
                    .attr("transform", `translate(${marginLeft}, 0)`)
                    .call(d3.axisLeft(y)
                        .ticks(Math.ceil((y.domain()[1] - y.domain()[0]) / 100))
                        .tickFormat(d3.format("d"))) // Bu satır 100'er 100'er aralık ayarlamayı sağlar
                    .call(g => g.select(".domain").remove());

                // Tabloyu ekle
                const tableData = rawData.map(d => ({
                    formasyon: d.Formasyon,
                    top: d["Üst Derinlik (TVD)"],
                    bottom: d["Alt Derinlik (TVD)"]
                }));

                const tableGroup = svg.append("g")
                    .attr("transform", `translate(${plotWidth + marginLeft}, ${marginTop})`);

                const table = tableGroup.append("foreignObject")
                    .attr("width", tableWidth)
                    .attr("height", height - marginTop - marginBottom)
                    .append("xhtml:table")
                    .style("border-collapse", "collapse")
                    .style("width", "100%");

                const header = table.append("thead").append("tr");
                header.append("th").text("Formasyon").style("border", "1px solid #ddd").style("padding", "8px");
                header.append("th").text("Üst Derinlik (TVD)").style("border", "1px solid #ddd").style("padding", "8px");
                header.append("th").text("Alt Derinlik (TVD)").style("border", "1px solid #ddd").style("padding", "8px");

                const body = table.append("tbody");
                tableData.forEach(d => {
                    const row = body.append("tr");
                    row.append("td").text(d.formasyon).style("border", "1px solid #ddd").style("padding", "8px");
                    row.append("td").text(d.top).style("border", "1px solid #ddd").style("padding", "8px");
                    row.append("td").text(d.bottom).style("border", "1px solid #ddd").style("padding", "8px");
                });

                // Zoom fonksiyonu
                function zoom(svg) {
                    const extent = [[marginLeft, marginTop], [width - marginRight, height - marginBottom]];

                    svg.call(d3.zoom()
                        .scaleExtent([1, 8])
                        .translateExtent(extent)
                        .extent(extent)
                        .on("zoom", zoomed));

                    function zoomed(event) {
                        y.range([marginTop, height - marginBottom].map(d => event.transform.applyY(d)));
                        svg.selectAll("rect")
                            .attr("y", d => y(d[0]))
                            .attr("height", d => y(d[1]) - y(d[0]));
                        yAxis.call(d3.axisLeft(y)
                            .ticks(Math.ceil((y.domain()[1] - y.domain()[0]) / 100))
                            .tickFormat(d3.format("d"))); // Zoom sırasında da 100'er 100'er aralıkları tut
                    }
                }

            }

            function calculation_MD(wellboreData) {
                let xCoords = [];
                let yCoords = [];
                let zCoords = [];
                let md = [];

                let previousX = 0;
                let previousY = 0;
                let previousZ = 0;
                let cumulativeMD = 0;

                wellboreData.forEach((wellbore, index) => {
                    let radAzi = wellbore.Azi * (Math.PI / 180);

                    // Koordinatlar hesaplanıyor
                    let currentX = wellbore.VS * Math.sin(radAzi);
                    let currentY = wellbore.VS * Math.cos(radAzi);
                    let currentZ = wellbore.TVD;

                    if (index === 0) {
                        // İlk noktada MD, TVD'ye eşit olur
                        xCoords.push(0);
                        yCoords.push(0);
                        zCoords.push(currentZ);
                        md.push(currentZ);
                    } else {
                        // Delta değerlerini hesaplama
                        let deltaX = currentX - previousX;
                        let deltaY = currentY - previousY;
                        let deltaZ = currentZ - previousZ;

                        let deltaMD = Math.sqrt(deltaX ** 2 + deltaY ** 2 + deltaZ ** 2);
                        cumulativeMD += deltaMD;

                        xCoords.push(currentX);
                        yCoords.push(currentY);
                        zCoords.push(currentZ);
                        md.push(cumulativeMD);
                    }

                    // Önceki koordinatları güncelle
                    previousX = currentX;
                    previousY = currentY;
                    previousZ = currentZ;
                });

                return md;
            }

            function drawChart2(wellboreData) {
                if (originalFormations.length === 0) {
                    console.error("Önce formasyon dosyası yükleyin.");
                    return;
                }

                let formations = [...originalFormations];
                let lastWellboreMD = wellboreData[wellboreData.length - 1]?.MD || 0;

                let previousBottomMD = 0;  // Önceki formasyonun alt derinliği

                formations.forEach((formation, index) => {
                    let originalTopDepth = formation['Üst Derinlik (TVD)'];
                    let originalBottomDepth = formation['Alt Derinlik (TVD)'];

                    let newTopMD = null;
                    let newBottomMD = null;

                    let foundTop = false;
                    let foundBottom = false;

                    // Üst Derinlik (TVD) için MD hesaplama
                    for (let i = 0; i < wellboreData.length - 1; i++) {
                        let current = wellboreData[i];
                        let next = wellboreData[i + 1];

                        if (current.TVD <= originalTopDepth && next.TVD >= originalTopDepth) {
                            let ratio = (originalTopDepth - current.TVD) / (next.TVD - current.TVD);
                            newTopMD = current.MD + ratio * (next.MD - current.MD);
                            foundTop = true;
                        }

                        if (current.TVD <= originalBottomDepth && next.TVD >= originalBottomDepth) {
                            let ratio = (originalBottomDepth - current.TVD) / (next.TVD - current.TVD);
                            newBottomMD = current.MD + ratio * (next.MD - current.MD);
                            foundBottom = true;
                        }
                    }

                    if (originalTopDepth < wellboreData[0].TVD || originalTopDepth > wellboreData[wellboreData.length - 1].TVD) {
                        newTopMD = previousBottomMD;
                    }

                    // Formasyonun alt derinlik hesaplaması
                    if (newBottomMD === null && previousBottomMD !== null) {
                        newBottomMD = previousBottomMD + (originalBottomDepth - originalTopDepth);
                    }

                    // Güncellenmiş alt derinliği kaydet
                    previousBottomMD = newBottomMD || previousBottomMD;
                    formation['Üst Derinlik (TVD)'] = newTopMD;
                    formation['Alt Derinlik (TVD)'] = newBottomMD;

                    console.log(`Formasyon: ${formation['Formasyon']}, Yeni Üst Derinlik(MD): ${newTopMD}, Yeni Alt Derinlik(MD): ${newBottomMD}`);
                });

                const data = formations.map((d, i) => {
                    const depth = d['Alt Derinlik (TVD)'] - d['Üst Derinlik (TVD)']; // Yeni depth hesaplama
                    return {
                        state: "Kuyu",
                        formasyon: d.Formasyon,
                        depth: depth
                    };
                });

                const plotWidth = 400; // Grafiğin genişliği
                const tableWidth = 300; // Tablo genişliği
                const width = plotWidth + tableWidth + 100; // Toplam genişlik (boşluk bırakmak için ek genişlik)
                const height = 700;
                const marginTop = 60; // Grafiği ve tabloyu aşağı almak için arttırıldı
                const marginRight = 10;
                const marginBottom = 40; // Alt margin, grafiği ve tabloyu aşağı almak için arttırıldı
                const marginLeft = 60; // Tablo için genişletildi

                const series = d3.stack()
                    .keys(d3.union(data.map(d => d.formasyon)))
                    .value(([, D], key) => D.get(key).depth)
                    (d3.index(data, d => d.state, d => d.formasyon));

                const x = d3.scaleBand()
                    .domain(d3.groupSort(data, D => -d3.sum(D, d => d.depth), d => d.state))
                    .range([marginLeft, plotWidth - marginRight])
                    .padding(0.1);

                const y = d3.scaleLinear()
                    .domain([0, d3.max(series, d => d3.max(d, d => d[1]))])
                    .range([marginTop, height - marginBottom]); // Y ekseni yukarıdan aşağıya doğru artacak şekilde ayarlandı

                const color = d3.scaleOrdinal()
                    .domain(series.map(d => d.key))
                    .range(d3.schemeSpectral[series.length])
                    .unknown("#ccc");

                const svg = d3.select("#plot2").append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .attr("viewBox", [0, 0, width, height])
                    .attr("style", "max-width: 100%; height: auto;")
                    .call(zoom); // Zoom davranışı burada ekleniyor

                // Çubukları ekle
                svg.append("g")
                    .selectAll("g")
                    .data(series)
                    .join("g")
                    .attr("fill", d => color(d.key))
                    .selectAll("rect")
                    .data(D => D.map(d => (d.key = D.key, d)))
                    .join("rect")
                    .attr("x", d => x(d.data[0]))
                    .attr("y", d => y(d[0])) // Zoom işlemi için güncellendi
                    .attr("height", d => y(d[1]) - y(d[0])) // Zoom işlemi için güncellendi
                    .attr("width", x.bandwidth())
                    .append("title")
                    .text(d => `${d.data[0]} ${d.key}\n${d.data[1].get(d.key).depth.toLocaleString("tr")}`);

                // Y eksenini ekle ve aralıkları 100'er 100'er ayarla
                const yAxis = svg.append("g")
                    .attr("transform", `translate(${marginLeft}, 0)`)
                    .call(d3.axisLeft(y)
                        .ticks(Math.ceil((y.domain()[1] - y.domain()[0]) / 100))
                        .tickFormat(d3.format("d"))) // Bu satır 100'er 100'er aralık ayarlamayı sağlar
                    .call(g => g.select(".domain").remove());


                // Tabloyu ekle
                const tableData = formations.map(d => ({
                    formasyon: d.Formasyon,
                    top: d["Üst Derinlik (TVD)"],
                    bottom: d["Alt Derinlik (TVD)"]
                }));

                const tableGroup = svg.append("g")
                    .attr("transform", `translate(${plotWidth + marginLeft}, ${marginTop})`);

                const table = tableGroup.append("foreignObject")
                    .attr("width", tableWidth)
                    .attr("height", height - marginTop - marginBottom)
                    .append("xhtml:table")
                    .style("border-collapse", "collapse")
                    .style("width", "100%");

                const header = table.append("thead").append("tr");
                header.append("th").text("Formasyon").style("border", "1px solid #ddd").style("padding", "8px");
                header.append("th").text("Yeni Üst Derinlik (TVD)").style("border", "1px solid #ddd").style("padding", "8px");
                header.append("th").text("Yeni Alt Derinlik (TVD)").style("border", "1px solid #ddd").style("padding", "8px");

                const body = table.append("tbody");
                tableData.forEach(d => {
                    const row = body.append("tr");
                    row.append("td").text(d.formasyon).style("border", "1px solid #ddd").style("padding", "8px");
                    row.append("td").text(d.top.toFixed(2)).style("border", "1px solid #ddd").style("padding", "8px");
                    row.append("td").text(d.bottom.toFixed(2)).style("border", "1px solid #ddd").style("padding", "8px");
                });


                // Zoom fonksiyonu
                function zoom(svg) {
                    const extent = [[marginLeft, marginTop], [width - marginRight, height - marginBottom]];

                    svg.call(d3.zoom()
                        .scaleExtent([1, 8])
                        .translateExtent(extent)
                        .extent(extent)
                        .on("zoom", zoomed));

                    function zoomed(event) {
                        y.range([marginTop, height - marginBottom].map(d => event.transform.applyY(d)));
                        svg.selectAll("rect")
                            .attr("y", d => y(d[0]))
                            .attr("height", d => y(d[1]) - y(d[0]));
                        yAxis.call(d3.axisLeft(y)
                            .ticks(Math.ceil((y.domain()[1] - y.domain()[0]) / 100))
                            .tickFormat(d3.format("d"))); // Zoom sırasında da 100'er 100'er aralıkları tut
                    }
                }
            }

        });
    </script>
</body>
</html>
