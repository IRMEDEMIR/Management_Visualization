@{
    ViewData["Title"] = "Kuyu Ve Yüzey Görselleştirmesi";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>
    <style>
        #drop-zone {
            border: 2px dashed #007bff;
            border-radius: 5px;
            padding: 20px;
            text-align: center;
            margin: 20px;
            font-size: 18px;
            color: #007bff;
        }

        #graph-container {
            display: flex;
            align-items: center;
            width: 100%;
            max-width: 1200px;
        }

        #values {
            margin-top: 20px;
            background: #ffffff;
            border-radius: 5px;
            padding: 15px;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
        }

        #palette-container {
            display: none;
            margin: 20px;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 5px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

            #palette-container label {
                font-size: 16px;
                font-weight: bold;
                margin-right: 10px;
            }

            #palette-container select {
                padding: 5px;
                font-size: 16px;
                border-radius: 5px;
                border: 1px solid #ced4da;
                background: #ffffff;
                cursor: pointer;
                transition: background-color 0.3s, border-color 0.3s;
            }

                #palette-container select:hover {
                    background-color: #e9ecef;
                    border-color: #adb5bd;
                }
    </style>
</head>
<body>
    <div id="container">
        <div id="drop-zone">Sürükleyip bırakın veya dosya seçin</div>
        <div id="palette-container">
            <label for="palette-select">Renk Paleti Seçiniz:</label>
            <select id="palette-select">
                <option value="Viridis">Viridis</option>
                <option value="Cividis">Cividis</option>
                <option value="Plasma">Plasma</option>
                <option value="Inferno">Inferno</option>
                <option value="Magma">Magma</option>
                <option value="Rainbow">Rainbow</option>
                <option value="Jet">Jet</option>
                <option value="Hot">Hot</option>
                <option value="Electric">Electric</option>
                <option value="Earth">Earth</option>
                <option value="YlGnBu">YlGnBu</option>
                <option value="YlOrRd">YlOrRd</option>
            </select>
        </div>
        <div id="graph-container">
            <div id="combined-plot" style="max-width: 900px; height: 650px;"></div>
        </div>
        <input type="file" id="file-input" style="display:none;" />
        <div id="values">
            <h3>Hesaplanan Değerler:</h3>
            <p id="xMin"></p>
            <p id="xMax"></p>
            <p id="yMin"></p>
            <p id="yMax"></p>
            <p id="zMin"></p>
            <p id="zMax"></p>
            <p id="maxXYRange"></p>
            <p id="zRange"></p>
        </div>
    </div>
    <script>
        const dropZone = document.getElementById('drop-zone');
        const fileInput = document.getElementById('file-input');

        dropZone.addEventListener('dragover', (event) => {
            event.preventDefault();
            dropZone.style.backgroundColor = '#e1e1e1';
        });

        dropZone.addEventListener('dragleave', () => {
            dropZone.style.backgroundColor = '';
        });

        dropZone.addEventListener('drop', (event) => {
            event.preventDefault();
            dropZone.style.backgroundColor = '';
            const files = event.dataTransfer.files;
            if (files.length) {
                handleFiles(files);
            }
        });

        fileInput.addEventListener('change', () => {
            const files = fileInput.files;
            if (files.length) {
                handleFiles(files);
            }
        });

        dropZone.addEventListener('click', () => {
            fileInput.click();
        });

        function handleFiles(files) {
            const jsonFiles = [];
            let csvFile = null;

            Array.from(files).forEach(file => {
                if (file.type === 'application/json' || file.name.endsWith('.json')) {
                    jsonFiles.push(file);
                } else if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
                    csvFile = file;
                } else {
                    alert('Sadece JSON ve CSV dosyaları kabul edilir.');
                }
            });

            const jsonReaders = [];
            const jsonDataArray = [];

            if (jsonFiles.length) {
                jsonFiles.forEach((file, index) => {
                    const reader = new FileReader();
                    jsonReaders.push(reader);
                    reader.onload = (event) => {
                        const jsonData = JSON.parse(event.target.result);
                        jsonDataArray.push(jsonData);
                        if (jsonDataArray.length === jsonFiles.length) {
                            if (csvFile) {
                                loadCSVData(csvFile, jsonDataArray);
                            } else {
                                processJSONData(jsonDataArray);
                            }
                        }
                    };
                    reader.readAsText(file);
                });
            } else if (csvFile) {
                loadCSVData(csvFile, jsonDataArray);
            }
        }

        function loadCSVData(csvFile, jsonDataArray) {
            const reader = new FileReader();
            reader.onload = (event) => {
                const csvText = event.target.result;
                processCSV(csvText, jsonDataArray);
            };
            reader.readAsText(csvFile);
        }

        function processCSV(csvText, jsonDataArray) {
            Papa.parse(csvText, {
                header: false,
                skipEmptyLines: true,
                complete: function (results) {
                    const data = results.data;

                    const wellpathStartIndex = data.findIndex(row => row.includes('Wellpath Report'));
                    if (wellpathStartIndex === -1) {
                        console.error("Wellpath Report not found in CSV.");
                        return;
                    }

                    const headers = data[wellpathStartIndex + 1];
                    const wellpathData = data.slice(wellpathStartIndex + 2);

                    let maxCenterX = 0;
                    let maxCenterY = 0;
                    let maxExtentZ = 0;

                    if (jsonDataArray.length) {
                        for (let i = 0; i < jsonDataArray.length; i++) {
                            const surfaceData = jsonDataArray[i];
                            const centerX = (surfaceData.extent[0][0] + surfaceData.extent[1][0]) / 2;
                            const centerY = (surfaceData.extent[0][1] + surfaceData.extent[1][1]) / 2;
                            const currentExtentZ = surfaceData.extent[1][2];
                            if (centerX > maxCenterX) {
                                maxCenterX = centerX;
                            }
                            if (centerY > maxCenterY) {
                                maxCenterY = centerY;
                            }
                            if (currentExtentZ > maxExtentZ) {
                                maxExtentZ = currentExtentZ;
                            }
                        }
                    }

                    let x = [];
                    let y = [];
                    let z = [];
                    const directions = [];

                    let previousX = 0;
                    let previousY = 0;

                    wellpathData.forEach(row => {
                        const verticalSectionStr = row[headers.indexOf('Vertical Section[m]')];
                        const aziDegStr = row[headers.indexOf('Azi[deg]')];
                        const tvdStr = row[headers.indexOf('TVD[m]')];

                        if (!verticalSectionStr || !aziDegStr || !tvdStr) {
                            console.error("Missing data in row:", row);
                            return;
                        }

                        const verticalSection = parseFloat(verticalSectionStr.replace(',', '.'));
                        const aziDeg = parseFloat(aziDegStr.replace(',', '.'));
                        const tvd = parseFloat(tvdStr.replace(',', '.'));

                        if (isNaN(verticalSection) || isNaN(aziDeg) || isNaN(tvd)) {
                            console.error(`Invalid data: Vertical Section = ${verticalSection}, Azi = ${aziDeg}, TVD = ${tvd}`);
                            return;
                        }

                        const aziRad = aziDeg * (Math.PI / 180);

                        if (aziDeg === 0 && x.length > 0 && y.length > 0) {
                            x.push(previousX);
                            y.push(previousY);
                        } else {
                            previousX = verticalSection * Math.sin(aziRad);
                            previousY = verticalSection * Math.cos(aziRad);
                            x.push(previousX);
                            y.push(previousY);
                        }
                        
                        
                        z.push(tvd);
                        
                        directions.push(aziDeg);
                    });

                    if (jsonDataArray.length) {
                        x = x.map(v => v + maxCenterX);
                        y = y.map(v => v + maxCenterY);
                    }

                    const wellTrace = {
                        x: x,
                        y: y,
                        z: z,
                        mode: 'lines',
                        type: 'scatter3d',
                        line: {
                            color: 'blue',
                            width: 5
                        },
                        name: 'Kuyu'
                    };

                    const xMin = Math.min(...x);
                    const xMax = Math.max(...x);
                    const yMin = Math.min(...y);
                    const yMax = Math.max(...y);
                    const zMin = Math.min(...z);
                    const zMax = Math.max(...z);

                    const maxXYRange = Math.max(Math.abs(xMin), Math.abs(xMax), Math.abs(yMin), Math.abs(yMax)) * 2;
                    const zRange = zMax * 1.1;

                    document.getElementById('xMin').textContent = `xMin: ${xMin}`;
                    document.getElementById('xMax').textContent = `xMax: ${xMax}`;
                    document.getElementById('yMin').textContent = `yMin: ${yMin}`;
                    document.getElementById('yMax').textContent = `yMax: ${yMax}`;
                    document.getElementById('zMin').textContent = `zMin: ${zMin}`;
                    document.getElementById('zMax').textContent = `zMax: ${zMax}`;
                    document.getElementById('maxXYRange').textContent = `maxXYRange: ${maxXYRange}`;
                    document.getElementById('zRange').textContent = `zRange: ${zRange}`;
                    
                    const cone = {
                        type: 'cone',        
                        x: [maxXYRange-50],
                        y: [0],
                        z: [zMax],
                        u: [0],
                        v: [2],
                        w: [0],
                        colorscale: [[0, 'red'], [1, 'red']],

                        sizemode: 'scaled',
                        sizeref: 50,
                        anchor: 'tail',
                        showscale: false
                    };

                    const text = {
                        x: [maxXYRange-50],
                        y: [0],
                        z: [zMax],
                        mode: 'text',
                        type: 'scatter3d',
                        text: ['Kuzey'],
                        textposition: 'top center',
                        showlegend: false
                    };
                    const combinedData = [wellTrace, cone, text];

                    const layout = {
                        scene: {
                            xaxis: { title: 'X', range: [-maxXYRange, maxXYRange] },
                            yaxis: { title: 'Y', range: [-maxXYRange, maxXYRange] },
                            zaxis: { title: 'Z', range: [zRange, 0] }
                        },
                        title: '3D Well Path'
                    };

                    Plotly.newPlot('combined-plot', combinedData, layout);
                    document.getElementById('palette-container').style.display = 'none';

               
                    if (jsonDataArray.length) {
                        processJSONData(jsonDataArray, wellTrace);
                    }
                }
            });
        }

        function processJSONData(jsonDataArray, wellTrace = null) {
            const paletteSelect = document.getElementById('palette-select');

            paletteSelect.addEventListener('change', () => {
                updatePlot(jsonDataArray, wellTrace);
            });

            updatePlot(jsonDataArray, wellTrace);
        }
        function getSurfaceBounds(jsonDataArray) {
            let minX = Infinity;
            let minY = Infinity;
            let maxZ = -Infinity;

            jsonDataArray.forEach(data => {
                const binsX = data.bins[0];
                const binsY = data.bins[1];
                const extentX = data.extent[0][0];
                const extentY = data.extent[0][1];
                const points = data.points;

                for (let i = 0; i < binsX; i++) {
                    const x = extentX + i * data.increment[0];
                    if (x < minX) {
                        minX = x;
                    }
                }

                for (let j = 0; j < binsY; j++) {
                    const y = extentY + j * data.increment[1];
                    if (y < minY) {
                        minY = y;
                    }
                }

                for (let j = 0; j < binsY; j++) {
                    for (let i = 0; i < binsX; i++) {
                        if (points[j * binsX + i] > maxZ) {
                            maxZ = points[j * binsX + i];
                        }
                    }
                }
            });

            return { minX, minY, maxZ };
        }

        function addDirectionArrow(minX, minY, maxZ) {
            const cone = {
                type: 'cone',        
                x: [minX],
                y: [minY + 5000],
                z: [maxZ],
                u: [0],
                v: [25],
                w: [0],
                colorscale: [[0, 'red'], [1, 'red']],

                sizemode: 'scaled',
                sizeref: 100,
                anchor: 'tail',
                showscale: false
            };
            const text = {
                x: [minX],
                y: [minY + 5000],
                z: [maxZ],
                mode: 'text',
                type: 'scatter3d',
                text: ['Kuzey'],
                textposition: 'top center',
                showlegend: false
            };

            return  {cone,text} ;
        }

        function updatePlot(jsonDataArray, wellTrace = null) {
            const selectedPalette = document.getElementById('palette-select').value;

            const surfaceTraces = jsonDataArray.map((data, index) => {
                const binsX = data.bins[0];
                const binsY = data.bins[1];
                const extentX = data.extent[0][0];
                const extentY = data.extent[0][1];
                const points = data.points;

                let x = [];
                let y = [];
                let z = [];

                for (let i = 0; i < binsX; i++) {
                    x.push(extentX + i * data.increment[0]);
                }

                for (let j = 0; j < binsY; j++) {
                    y.push(extentY + j * data.increment[1]);
                }

                for (let j = 0; j < binsY; j++) {
                    let row = [];
                    for (let i = 0; i < binsX; i++) {
                        row.push(points[j * binsX + i]);
                    }
                    z.push(row);
                }

                return {
                    z: z,
                    x: x,
                    y: y,
                    type: 'surface',
                    colorscale: selectedPalette,
                    name: `Surface ${index + 1}`,
                    colorbar: {
                        len: 0.6,
                        thickness: 10,
                        tickfont: {
                            size: 12,
                            color: 'black'
                        },
                        title: {
                            text: `Surface ${index + 1}`,
                            font: {
                                size: 12,
                                color: 'black'
                            },
                            side: 'right'
                        },
                        x: 1.7 + index * 0.20,
                        y: 0.7
                    }
                };
            });

            const combinedData = [...surfaceTraces];
            if (wellTrace) {
                combinedData.push(wellTrace);
            }

            const { minX, minY, maxZ } = getSurfaceBounds(jsonDataArray);
            
            const { cone, text } = addDirectionArrow(minX, minY, maxZ);
            //combinedData.push(line);  // Çizgiyi veri dizisine ekle
            combinedData.push(cone);  // Koniyi veri dizisine ekle
            combinedData.push(text);  // Metni veri dizisine ekle
            const layout = {
                title: 'Kuyu Ve Yüzey Görselleştirmesi',
                showlegend: true,
                scene: {
                    xaxis: { title: 'X Axis' },
                    yaxis: { title: 'Y Axis' },
                    zaxis: { title: 'Z Axis', range: [maxZ,0] }
                }
            };

            Plotly.newPlot('combined-plot', combinedData, layout);
            document.getElementById('palette-container').style.display = 'block';
        }

    </script>
</body>
</html>